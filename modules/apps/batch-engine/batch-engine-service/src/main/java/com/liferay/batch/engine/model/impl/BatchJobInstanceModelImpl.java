/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.batch.engine.model.impl;

import com.liferay.batch.engine.model.BatchJobInstance;
import com.liferay.batch.engine.model.BatchJobInstanceModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the BatchJobInstance service. Represents a row in the &quot;BatchJobInstance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>BatchJobInstanceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BatchJobInstanceImpl}.
 * </p>
 *
 * @author Ivica Cardic
 * @see BatchJobInstanceImpl
 * @generated
 */
@ProviderType
public class BatchJobInstanceModelImpl
	extends BaseModelImpl<BatchJobInstance> implements BatchJobInstanceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a batch job instance model instance should use the <code>BatchJobInstance</code> interface instead.
	 */
	public static final String TABLE_NAME = "BatchJobInstance";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"batchJobInstanceId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"jobName", Types.VARCHAR},
		{"jobKey", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("batchJobInstanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("jobName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jobKey", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BatchJobInstance (uuid_ VARCHAR(75) null,batchJobInstanceId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,jobName VARCHAR(75) null,jobKey VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table BatchJobInstance";

	public static final String ORDER_BY_JPQL =
		" ORDER BY batchJobInstance.batchJobInstanceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BatchJobInstance.batchJobInstanceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.batch.engine.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.batch.engine.model.BatchJobInstance"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.batch.engine.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.batch.engine.model.BatchJobInstance"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.batch.engine.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.batch.engine.model.BatchJobInstance"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long JOBKEY_COLUMN_BITMASK = 2L;

	public static final long JOBNAME_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long BATCHJOBINSTANCEID_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.batch.engine.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.batch.engine.model.BatchJobInstance"));

	public BatchJobInstanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _batchJobInstanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBatchJobInstanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _batchJobInstanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BatchJobInstance.class;
	}

	@Override
	public String getModelClassName() {
		return BatchJobInstance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BatchJobInstance, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BatchJobInstance, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BatchJobInstance, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BatchJobInstance)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BatchJobInstance, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BatchJobInstance, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BatchJobInstance)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BatchJobInstance, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BatchJobInstance, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<BatchJobInstance, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BatchJobInstance, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BatchJobInstance, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<BatchJobInstance, Object>>();
		Map<String, BiConsumer<BatchJobInstance, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<BatchJobInstance, ?>>();

		attributeGetterFunctions.put("uuid", BatchJobInstance::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<BatchJobInstance, String>)BatchJobInstance::setUuid);
		attributeGetterFunctions.put(
			"batchJobInstanceId", BatchJobInstance::getBatchJobInstanceId);
		attributeSetterBiConsumers.put(
			"batchJobInstanceId",
			(BiConsumer<BatchJobInstance, Long>)
				BatchJobInstance::setBatchJobInstanceId);
		attributeGetterFunctions.put(
			"companyId", BatchJobInstance::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<BatchJobInstance, Long>)BatchJobInstance::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", BatchJobInstance::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<BatchJobInstance, Date>)
				BatchJobInstance::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", BatchJobInstance::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<BatchJobInstance, Date>)
				BatchJobInstance::setModifiedDate);
		attributeGetterFunctions.put("jobName", BatchJobInstance::getJobName);
		attributeSetterBiConsumers.put(
			"jobName",
			(BiConsumer<BatchJobInstance, String>)BatchJobInstance::setJobName);
		attributeGetterFunctions.put("jobKey", BatchJobInstance::getJobKey);
		attributeSetterBiConsumers.put(
			"jobKey",
			(BiConsumer<BatchJobInstance, String>)BatchJobInstance::setJobKey);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getBatchJobInstanceId() {
		return _batchJobInstanceId;
	}

	@Override
	public void setBatchJobInstanceId(long batchJobInstanceId) {
		_batchJobInstanceId = batchJobInstanceId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getJobName() {
		if (_jobName == null) {
			return "";
		}
		else {
			return _jobName;
		}
	}

	@Override
	public void setJobName(String jobName) {
		_columnBitmask |= JOBNAME_COLUMN_BITMASK;

		if (_originalJobName == null) {
			_originalJobName = _jobName;
		}

		_jobName = jobName;
	}

	public String getOriginalJobName() {
		return GetterUtil.getString(_originalJobName);
	}

	@Override
	public String getJobKey() {
		if (_jobKey == null) {
			return "";
		}
		else {
			return _jobKey;
		}
	}

	@Override
	public void setJobKey(String jobKey) {
		_columnBitmask |= JOBKEY_COLUMN_BITMASK;

		if (_originalJobKey == null) {
			_originalJobKey = _jobKey;
		}

		_jobKey = jobKey;
	}

	public String getOriginalJobKey() {
		return GetterUtil.getString(_originalJobKey);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(BatchJobInstance.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), BatchJobInstance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BatchJobInstance toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BatchJobInstance)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BatchJobInstanceImpl batchJobInstanceImpl = new BatchJobInstanceImpl();

		batchJobInstanceImpl.setUuid(getUuid());
		batchJobInstanceImpl.setBatchJobInstanceId(getBatchJobInstanceId());
		batchJobInstanceImpl.setCompanyId(getCompanyId());
		batchJobInstanceImpl.setCreateDate(getCreateDate());
		batchJobInstanceImpl.setModifiedDate(getModifiedDate());
		batchJobInstanceImpl.setJobName(getJobName());
		batchJobInstanceImpl.setJobKey(getJobKey());

		batchJobInstanceImpl.resetOriginalValues();

		return batchJobInstanceImpl;
	}

	@Override
	public int compareTo(BatchJobInstance batchJobInstance) {
		long primaryKey = batchJobInstance.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BatchJobInstance)) {
			return false;
		}

		BatchJobInstance batchJobInstance = (BatchJobInstance)obj;

		long primaryKey = batchJobInstance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BatchJobInstanceModelImpl batchJobInstanceModelImpl = this;

		batchJobInstanceModelImpl._originalUuid =
			batchJobInstanceModelImpl._uuid;

		batchJobInstanceModelImpl._originalCompanyId =
			batchJobInstanceModelImpl._companyId;

		batchJobInstanceModelImpl._setOriginalCompanyId = false;

		batchJobInstanceModelImpl._setModifiedDate = false;

		batchJobInstanceModelImpl._originalJobName =
			batchJobInstanceModelImpl._jobName;

		batchJobInstanceModelImpl._originalJobKey =
			batchJobInstanceModelImpl._jobKey;

		batchJobInstanceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BatchJobInstance> toCacheModel() {
		BatchJobInstanceCacheModel batchJobInstanceCacheModel =
			new BatchJobInstanceCacheModel();

		batchJobInstanceCacheModel.uuid = getUuid();

		String uuid = batchJobInstanceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			batchJobInstanceCacheModel.uuid = null;
		}

		batchJobInstanceCacheModel.batchJobInstanceId = getBatchJobInstanceId();

		batchJobInstanceCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			batchJobInstanceCacheModel.createDate = createDate.getTime();
		}
		else {
			batchJobInstanceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			batchJobInstanceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			batchJobInstanceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		batchJobInstanceCacheModel.jobName = getJobName();

		String jobName = batchJobInstanceCacheModel.jobName;

		if ((jobName != null) && (jobName.length() == 0)) {
			batchJobInstanceCacheModel.jobName = null;
		}

		batchJobInstanceCacheModel.jobKey = getJobKey();

		String jobKey = batchJobInstanceCacheModel.jobKey;

		if ((jobKey != null) && (jobKey.length() == 0)) {
			batchJobInstanceCacheModel.jobKey = null;
		}

		return batchJobInstanceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BatchJobInstance, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BatchJobInstance, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BatchJobInstance, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((BatchJobInstance)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<BatchJobInstance, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<BatchJobInstance, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BatchJobInstance, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((BatchJobInstance)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		BatchJobInstance.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		BatchJobInstance.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private long _batchJobInstanceId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _jobName;
	private String _originalJobName;
	private String _jobKey;
	private String _originalJobKey;
	private long _columnBitmask;
	private BatchJobInstance _escapedModel;

}