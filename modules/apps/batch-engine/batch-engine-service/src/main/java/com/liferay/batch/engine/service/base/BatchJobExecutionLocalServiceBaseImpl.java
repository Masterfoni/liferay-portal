/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.batch.engine.service.base;

import com.liferay.batch.engine.model.BatchJobExecution;
import com.liferay.batch.engine.service.BatchJobExecutionLocalService;
import com.liferay.batch.engine.service.persistence.BatchFileImportPersistence;
import com.liferay.batch.engine.service.persistence.BatchJobExecutionPersistence;
import com.liferay.batch.engine.service.persistence.BatchJobInstancePersistence;
import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.annotation.versioning.ProviderType;

/**
 * Provides the base implementation for the batch job execution local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.batch.engine.service.impl.BatchJobExecutionLocalServiceImpl}.
 * </p>
 *
 * @author Ivica Cardic
 * @see com.liferay.batch.engine.service.impl.BatchJobExecutionLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class BatchJobExecutionLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements BatchJobExecutionLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>BatchJobExecutionLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.liferay.batch.engine.service.BatchJobExecutionLocalServiceUtil</code>.
	 */

	/**
	 * Adds the batch job execution to the database. Also notifies the appropriate model listeners.
	 *
	 * @param batchJobExecution the batch job execution
	 * @return the batch job execution that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BatchJobExecution addBatchJobExecution(
		BatchJobExecution batchJobExecution) {

		batchJobExecution.setNew(true);

		return batchJobExecutionPersistence.update(batchJobExecution);
	}

	/**
	 * Creates a new batch job execution with the primary key. Does not add the batch job execution to the database.
	 *
	 * @param batchJobExecutionId the primary key for the new batch job execution
	 * @return the new batch job execution
	 */
	@Override
	@Transactional(enabled = false)
	public BatchJobExecution createBatchJobExecution(long batchJobExecutionId) {
		return batchJobExecutionPersistence.create(batchJobExecutionId);
	}

	/**
	 * Deletes the batch job execution with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param batchJobExecutionId the primary key of the batch job execution
	 * @return the batch job execution that was removed
	 * @throws PortalException if a batch job execution with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BatchJobExecution deleteBatchJobExecution(long batchJobExecutionId)
		throws PortalException {

		return batchJobExecutionPersistence.remove(batchJobExecutionId);
	}

	/**
	 * Deletes the batch job execution from the database. Also notifies the appropriate model listeners.
	 *
	 * @param batchJobExecution the batch job execution
	 * @return the batch job execution that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BatchJobExecution deleteBatchJobExecution(
		BatchJobExecution batchJobExecution) {

		return batchJobExecutionPersistence.remove(batchJobExecution);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			BatchJobExecution.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return batchJobExecutionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.batch.engine.model.impl.BatchJobExecutionModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return batchJobExecutionPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.batch.engine.model.impl.BatchJobExecutionModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return batchJobExecutionPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return batchJobExecutionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return batchJobExecutionPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public BatchJobExecution fetchBatchJobExecution(long batchJobExecutionId) {
		return batchJobExecutionPersistence.fetchByPrimaryKey(
			batchJobExecutionId);
	}

	/**
	 * Returns the batch job execution with the matching UUID and company.
	 *
	 * @param uuid the batch job execution's UUID
	 * @param companyId the primary key of the company
	 * @return the matching batch job execution, or <code>null</code> if a matching batch job execution could not be found
	 */
	@Override
	public BatchJobExecution fetchBatchJobExecutionByUuidAndCompanyId(
		String uuid, long companyId) {

		return batchJobExecutionPersistence.fetchByUuid_C_First(
			uuid, companyId, null);
	}

	/**
	 * Returns the batch job execution with the primary key.
	 *
	 * @param batchJobExecutionId the primary key of the batch job execution
	 * @return the batch job execution
	 * @throws PortalException if a batch job execution with the primary key could not be found
	 */
	@Override
	public BatchJobExecution getBatchJobExecution(long batchJobExecutionId)
		throws PortalException {

		return batchJobExecutionPersistence.findByPrimaryKey(
			batchJobExecutionId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(
			batchJobExecutionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(BatchJobExecution.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("batchJobExecutionId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			batchJobExecutionLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(BatchJobExecution.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"batchJobExecutionId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(
			batchJobExecutionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(BatchJobExecution.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("batchJobExecutionId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod
				<BatchJobExecution>() {

				@Override
				public void performAction(BatchJobExecution batchJobExecution)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, batchJobExecution);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(BatchJobExecution.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return batchJobExecutionLocalService.deleteBatchJobExecution(
			(BatchJobExecution)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return batchJobExecutionPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the batch job execution with the matching UUID and company.
	 *
	 * @param uuid the batch job execution's UUID
	 * @param companyId the primary key of the company
	 * @return the matching batch job execution
	 * @throws PortalException if a matching batch job execution could not be found
	 */
	@Override
	public BatchJobExecution getBatchJobExecutionByUuidAndCompanyId(
			String uuid, long companyId)
		throws PortalException {

		return batchJobExecutionPersistence.findByUuid_C_First(
			uuid, companyId, null);
	}

	/**
	 * Returns a range of all the batch job executions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.batch.engine.model.impl.BatchJobExecutionModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of batch job executions
	 * @param end the upper bound of the range of batch job executions (not inclusive)
	 * @return the range of batch job executions
	 */
	@Override
	public List<BatchJobExecution> getBatchJobExecutions(int start, int end) {
		return batchJobExecutionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of batch job executions.
	 *
	 * @return the number of batch job executions
	 */
	@Override
	public int getBatchJobExecutionsCount() {
		return batchJobExecutionPersistence.countAll();
	}

	/**
	 * Updates the batch job execution in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param batchJobExecution the batch job execution
	 * @return the batch job execution that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BatchJobExecution updateBatchJobExecution(
		BatchJobExecution batchJobExecution) {

		return batchJobExecutionPersistence.update(batchJobExecution);
	}

	/**
	 * Returns the batch file import local service.
	 *
	 * @return the batch file import local service
	 */
	public com.liferay.batch.engine.service.BatchFileImportLocalService
		getBatchFileImportLocalService() {

		return batchFileImportLocalService;
	}

	/**
	 * Sets the batch file import local service.
	 *
	 * @param batchFileImportLocalService the batch file import local service
	 */
	public void setBatchFileImportLocalService(
		com.liferay.batch.engine.service.BatchFileImportLocalService
			batchFileImportLocalService) {

		this.batchFileImportLocalService = batchFileImportLocalService;
	}

	/**
	 * Returns the batch file import persistence.
	 *
	 * @return the batch file import persistence
	 */
	public BatchFileImportPersistence getBatchFileImportPersistence() {
		return batchFileImportPersistence;
	}

	/**
	 * Sets the batch file import persistence.
	 *
	 * @param batchFileImportPersistence the batch file import persistence
	 */
	public void setBatchFileImportPersistence(
		BatchFileImportPersistence batchFileImportPersistence) {

		this.batchFileImportPersistence = batchFileImportPersistence;
	}

	/**
	 * Returns the batch job execution local service.
	 *
	 * @return the batch job execution local service
	 */
	public BatchJobExecutionLocalService getBatchJobExecutionLocalService() {
		return batchJobExecutionLocalService;
	}

	/**
	 * Sets the batch job execution local service.
	 *
	 * @param batchJobExecutionLocalService the batch job execution local service
	 */
	public void setBatchJobExecutionLocalService(
		BatchJobExecutionLocalService batchJobExecutionLocalService) {

		this.batchJobExecutionLocalService = batchJobExecutionLocalService;
	}

	/**
	 * Returns the batch job execution persistence.
	 *
	 * @return the batch job execution persistence
	 */
	public BatchJobExecutionPersistence getBatchJobExecutionPersistence() {
		return batchJobExecutionPersistence;
	}

	/**
	 * Sets the batch job execution persistence.
	 *
	 * @param batchJobExecutionPersistence the batch job execution persistence
	 */
	public void setBatchJobExecutionPersistence(
		BatchJobExecutionPersistence batchJobExecutionPersistence) {

		this.batchJobExecutionPersistence = batchJobExecutionPersistence;
	}

	/**
	 * Returns the batch job instance local service.
	 *
	 * @return the batch job instance local service
	 */
	public com.liferay.batch.engine.service.BatchJobInstanceLocalService
		getBatchJobInstanceLocalService() {

		return batchJobInstanceLocalService;
	}

	/**
	 * Sets the batch job instance local service.
	 *
	 * @param batchJobInstanceLocalService the batch job instance local service
	 */
	public void setBatchJobInstanceLocalService(
		com.liferay.batch.engine.service.BatchJobInstanceLocalService
			batchJobInstanceLocalService) {

		this.batchJobInstanceLocalService = batchJobInstanceLocalService;
	}

	/**
	 * Returns the batch job instance persistence.
	 *
	 * @return the batch job instance persistence
	 */
	public BatchJobInstancePersistence getBatchJobInstancePersistence() {
		return batchJobInstancePersistence;
	}

	/**
	 * Sets the batch job instance persistence.
	 *
	 * @param batchJobInstancePersistence the batch job instance persistence
	 */
	public void setBatchJobInstancePersistence(
		BatchJobInstancePersistence batchJobInstancePersistence) {

		this.batchJobInstancePersistence = batchJobInstancePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"com.liferay.batch.engine.model.BatchJobExecution",
			batchJobExecutionLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.batch.engine.model.BatchJobExecution");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return BatchJobExecutionLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return BatchJobExecution.class;
	}

	protected String getModelClassName() {
		return BatchJobExecution.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource =
				batchJobExecutionPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(
		type = com.liferay.batch.engine.service.BatchFileImportLocalService.class
	)
	protected com.liferay.batch.engine.service.BatchFileImportLocalService
		batchFileImportLocalService;

	@BeanReference(type = BatchFileImportPersistence.class)
	protected BatchFileImportPersistence batchFileImportPersistence;

	@BeanReference(type = BatchJobExecutionLocalService.class)
	protected BatchJobExecutionLocalService batchJobExecutionLocalService;

	@BeanReference(type = BatchJobExecutionPersistence.class)
	protected BatchJobExecutionPersistence batchJobExecutionPersistence;

	@BeanReference(
		type = com.liferay.batch.engine.service.BatchJobInstanceLocalService.class
	)
	protected com.liferay.batch.engine.service.BatchJobInstanceLocalService
		batchJobInstanceLocalService;

	@BeanReference(type = BatchJobInstancePersistence.class)
	protected BatchJobInstancePersistence batchJobInstancePersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}