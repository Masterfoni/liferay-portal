/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.batch.engine.model.impl;

import com.liferay.batch.engine.model.BatchFileImport;
import com.liferay.batch.engine.model.BatchFileImportModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the BatchFileImport service. Represents a row in the &quot;BatchFileImport&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>BatchFileImportModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BatchFileImportImpl}.
 * </p>
 *
 * @author Ivica Cardic
 * @see BatchFileImportImpl
 * @generated
 */
@ProviderType
public class BatchFileImportModelImpl
	extends BaseModelImpl<BatchFileImport> implements BatchFileImportModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a batch file import model instance should use the <code>BatchFileImport</code> interface instead.
	 */
	public static final String TABLE_NAME = "BatchFileImport";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"batchFileImportId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"fileEntryId", Types.BIGINT},
		{"batchJobExecutionId", Types.BIGINT}, {"domainName", Types.VARCHAR},
		{"version", Types.VARCHAR}, {"operation", Types.VARCHAR},
		{"callbackURL", Types.VARCHAR}, {"columnNames", Types.VARCHAR},
		{"status", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("batchFileImportId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("batchJobExecutionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("domainName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("callbackURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("columnNames", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BatchFileImport (uuid_ VARCHAR(75) null,batchFileImportId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,fileEntryId LONG,batchJobExecutionId LONG,domainName VARCHAR(75) null,version VARCHAR(75) null,operation VARCHAR(75) null,callbackURL VARCHAR(75) null,columnNames VARCHAR(75) null,status VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table BatchFileImport";

	public static final String ORDER_BY_JPQL =
		" ORDER BY batchFileImport.batchFileImportId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BatchFileImport.batchFileImportId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.batch.engine.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.batch.engine.model.BatchFileImport"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.batch.engine.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.batch.engine.model.BatchFileImport"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.batch.engine.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.batch.engine.model.BatchFileImport"),
		true);

	public static final long BATCHJOBEXECUTIONID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long STATUS_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long BATCHFILEIMPORTID_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.batch.engine.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.batch.engine.model.BatchFileImport"));

	public BatchFileImportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _batchFileImportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBatchFileImportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _batchFileImportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BatchFileImport.class;
	}

	@Override
	public String getModelClassName() {
		return BatchFileImport.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BatchFileImport, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BatchFileImport, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BatchFileImport, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BatchFileImport)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BatchFileImport, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BatchFileImport, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BatchFileImport)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BatchFileImport, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BatchFileImport, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<BatchFileImport, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BatchFileImport, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BatchFileImport, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<BatchFileImport, Object>>();
		Map<String, BiConsumer<BatchFileImport, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<BatchFileImport, ?>>();

		attributeGetterFunctions.put("uuid", BatchFileImport::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<BatchFileImport, String>)BatchFileImport::setUuid);
		attributeGetterFunctions.put(
			"batchFileImportId", BatchFileImport::getBatchFileImportId);
		attributeSetterBiConsumers.put(
			"batchFileImportId",
			(BiConsumer<BatchFileImport, Long>)
				BatchFileImport::setBatchFileImportId);
		attributeGetterFunctions.put(
			"companyId", BatchFileImport::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<BatchFileImport, Long>)BatchFileImport::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", BatchFileImport::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<BatchFileImport, Date>)BatchFileImport::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", BatchFileImport::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<BatchFileImport, Date>)
				BatchFileImport::setModifiedDate);
		attributeGetterFunctions.put(
			"fileEntryId", BatchFileImport::getFileEntryId);
		attributeSetterBiConsumers.put(
			"fileEntryId",
			(BiConsumer<BatchFileImport, Long>)BatchFileImport::setFileEntryId);
		attributeGetterFunctions.put(
			"batchJobExecutionId", BatchFileImport::getBatchJobExecutionId);
		attributeSetterBiConsumers.put(
			"batchJobExecutionId",
			(BiConsumer<BatchFileImport, Long>)
				BatchFileImport::setBatchJobExecutionId);
		attributeGetterFunctions.put(
			"domainName", BatchFileImport::getDomainName);
		attributeSetterBiConsumers.put(
			"domainName",
			(BiConsumer<BatchFileImport, String>)
				BatchFileImport::setDomainName);
		attributeGetterFunctions.put("version", BatchFileImport::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<BatchFileImport, String>)BatchFileImport::setVersion);
		attributeGetterFunctions.put(
			"operation", BatchFileImport::getOperation);
		attributeSetterBiConsumers.put(
			"operation",
			(BiConsumer<BatchFileImport, String>)BatchFileImport::setOperation);
		attributeGetterFunctions.put(
			"callbackURL", BatchFileImport::getCallbackURL);
		attributeSetterBiConsumers.put(
			"callbackURL",
			(BiConsumer<BatchFileImport, String>)
				BatchFileImport::setCallbackURL);
		attributeGetterFunctions.put(
			"columnNames", BatchFileImport::getColumnNames);
		attributeSetterBiConsumers.put(
			"columnNames",
			(BiConsumer<BatchFileImport, String>)
				BatchFileImport::setColumnNames);
		attributeGetterFunctions.put("status", BatchFileImport::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<BatchFileImport, String>)BatchFileImport::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getBatchFileImportId() {
		return _batchFileImportId;
	}

	@Override
	public void setBatchFileImportId(long batchFileImportId) {
		_batchFileImportId = batchFileImportId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@Override
	public long getBatchJobExecutionId() {
		return _batchJobExecutionId;
	}

	@Override
	public void setBatchJobExecutionId(long batchJobExecutionId) {
		_columnBitmask |= BATCHJOBEXECUTIONID_COLUMN_BITMASK;

		if (!_setOriginalBatchJobExecutionId) {
			_setOriginalBatchJobExecutionId = true;

			_originalBatchJobExecutionId = _batchJobExecutionId;
		}

		_batchJobExecutionId = batchJobExecutionId;
	}

	public long getOriginalBatchJobExecutionId() {
		return _originalBatchJobExecutionId;
	}

	@Override
	public String getDomainName() {
		if (_domainName == null) {
			return "";
		}
		else {
			return _domainName;
		}
	}

	@Override
	public void setDomainName(String domainName) {
		_domainName = domainName;
	}

	@Override
	public String getVersion() {
		if (_version == null) {
			return "";
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@Override
	public String getOperation() {
		if (_operation == null) {
			return "";
		}
		else {
			return _operation;
		}
	}

	@Override
	public void setOperation(String operation) {
		_operation = operation;
	}

	@Override
	public String getCallbackURL() {
		if (_callbackURL == null) {
			return "";
		}
		else {
			return _callbackURL;
		}
	}

	@Override
	public void setCallbackURL(String callbackURL) {
		_callbackURL = callbackURL;
	}

	@Override
	public String getColumnNames() {
		if (_columnNames == null) {
			return "";
		}
		else {
			return _columnNames;
		}
	}

	@Override
	public void setColumnNames(String columnNames) {
		_columnNames = columnNames;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(BatchFileImport.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), BatchFileImport.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BatchFileImport toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BatchFileImport)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BatchFileImportImpl batchFileImportImpl = new BatchFileImportImpl();

		batchFileImportImpl.setUuid(getUuid());
		batchFileImportImpl.setBatchFileImportId(getBatchFileImportId());
		batchFileImportImpl.setCompanyId(getCompanyId());
		batchFileImportImpl.setCreateDate(getCreateDate());
		batchFileImportImpl.setModifiedDate(getModifiedDate());
		batchFileImportImpl.setFileEntryId(getFileEntryId());
		batchFileImportImpl.setBatchJobExecutionId(getBatchJobExecutionId());
		batchFileImportImpl.setDomainName(getDomainName());
		batchFileImportImpl.setVersion(getVersion());
		batchFileImportImpl.setOperation(getOperation());
		batchFileImportImpl.setCallbackURL(getCallbackURL());
		batchFileImportImpl.setColumnNames(getColumnNames());
		batchFileImportImpl.setStatus(getStatus());

		batchFileImportImpl.resetOriginalValues();

		return batchFileImportImpl;
	}

	@Override
	public int compareTo(BatchFileImport batchFileImport) {
		long primaryKey = batchFileImport.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BatchFileImport)) {
			return false;
		}

		BatchFileImport batchFileImport = (BatchFileImport)obj;

		long primaryKey = batchFileImport.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BatchFileImportModelImpl batchFileImportModelImpl = this;

		batchFileImportModelImpl._originalUuid = batchFileImportModelImpl._uuid;

		batchFileImportModelImpl._originalCompanyId =
			batchFileImportModelImpl._companyId;

		batchFileImportModelImpl._setOriginalCompanyId = false;

		batchFileImportModelImpl._setModifiedDate = false;

		batchFileImportModelImpl._originalBatchJobExecutionId =
			batchFileImportModelImpl._batchJobExecutionId;

		batchFileImportModelImpl._setOriginalBatchJobExecutionId = false;

		batchFileImportModelImpl._originalStatus =
			batchFileImportModelImpl._status;

		batchFileImportModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BatchFileImport> toCacheModel() {
		BatchFileImportCacheModel batchFileImportCacheModel =
			new BatchFileImportCacheModel();

		batchFileImportCacheModel.uuid = getUuid();

		String uuid = batchFileImportCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			batchFileImportCacheModel.uuid = null;
		}

		batchFileImportCacheModel.batchFileImportId = getBatchFileImportId();

		batchFileImportCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			batchFileImportCacheModel.createDate = createDate.getTime();
		}
		else {
			batchFileImportCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			batchFileImportCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			batchFileImportCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		batchFileImportCacheModel.fileEntryId = getFileEntryId();

		batchFileImportCacheModel.batchJobExecutionId =
			getBatchJobExecutionId();

		batchFileImportCacheModel.domainName = getDomainName();

		String domainName = batchFileImportCacheModel.domainName;

		if ((domainName != null) && (domainName.length() == 0)) {
			batchFileImportCacheModel.domainName = null;
		}

		batchFileImportCacheModel.version = getVersion();

		String version = batchFileImportCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			batchFileImportCacheModel.version = null;
		}

		batchFileImportCacheModel.operation = getOperation();

		String operation = batchFileImportCacheModel.operation;

		if ((operation != null) && (operation.length() == 0)) {
			batchFileImportCacheModel.operation = null;
		}

		batchFileImportCacheModel.callbackURL = getCallbackURL();

		String callbackURL = batchFileImportCacheModel.callbackURL;

		if ((callbackURL != null) && (callbackURL.length() == 0)) {
			batchFileImportCacheModel.callbackURL = null;
		}

		batchFileImportCacheModel.columnNames = getColumnNames();

		String columnNames = batchFileImportCacheModel.columnNames;

		if ((columnNames != null) && (columnNames.length() == 0)) {
			batchFileImportCacheModel.columnNames = null;
		}

		batchFileImportCacheModel.status = getStatus();

		String status = batchFileImportCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			batchFileImportCacheModel.status = null;
		}

		return batchFileImportCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BatchFileImport, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BatchFileImport, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BatchFileImport, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((BatchFileImport)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<BatchFileImport, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<BatchFileImport, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BatchFileImport, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((BatchFileImport)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		BatchFileImport.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		BatchFileImport.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private long _batchFileImportId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _fileEntryId;
	private long _batchJobExecutionId;
	private long _originalBatchJobExecutionId;
	private boolean _setOriginalBatchJobExecutionId;
	private String _domainName;
	private String _version;
	private String _operation;
	private String _callbackURL;
	private String _columnNames;
	private String _status;
	private String _originalStatus;
	private long _columnBitmask;
	private BatchFileImport _escapedModel;

}